buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'ru.vyarus:gradle-quality-plugin:2.2.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'net.researchgate:gradle-release:2.4.0'
        classpath 'org.twitter4j:twitter4j-core:4.0.6'
        classpath 'gradle.plugin.se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.47'
    }
}

import twitter4j.TwitterFactory
import twitter4j.conf.ConfigurationBuilder
import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask

group 'io.github.sskorol'
version = version
description 'Test Data Supplier is an extended version of common TestNG DataProvider.'

ext {
    gradleScriptDir = "${rootProject.projectDir}/gradle"
    projectUrl = "https://github.com/sskorol/test-data-supplier"
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'ru.vyarus.quality'
apply plugin: 'se.bjurr.gitchangelog.git-changelog-gradle-plugin'
apply from: "${gradleScriptDir}/bintray.gradle"
apply from: "${gradleScriptDir}/release.gradle"
apply from: "${gradleScriptDir}/maven-publish.gradle"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    jcenter()
}

dependencies {
    compile('org.testng:testng:6.11',
            'org.jooq:joor:0.9.6',
            'one.util:streamex:0.6.5',
            'org.projectlombok:lombok:1.16.18',
            'io.vavr:vavr:0.9.0'
    )
    testCompile 'org.assertj:assertj-core:3.6.2'
}

task wrapper(type: Wrapper) {
    gradleVersion '4.0'
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourceJar
    archives javadocJar
}

test {
    useTestNG() {
        suites 'src/test/resources/smoke-suite.xml'
    }
}

jacoco {
    toolVersion = '0.7.6.201602180812'
}

jacocoTestReport {
    executionData = files("${project.buildDir}/jacoco/test.exec")
    reports {
        xml.enabled = true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled = true
        html.destination file("${buildDir}/reports/jacocoHtml")
    }
}

task gitChangelog(type: GitChangelogTask) {
    filePath = "CHANGELOG.md"
    templateContent = file('gradle/changelog.mustache').getText('UTF-8')
}

task tweet(type: Tweet)
afterReleaseBuild.dependsOn tweet, gitChangelog

class Tweet extends DefaultTask {

    String consumerKey = project.hasProperty('consumerKey') ? project.property('consumerKey') : System.getenv('CONSUMER_KEY')
    String consumerSecret = project.hasProperty('consumerSecret') ? project.property('consumerSecret') : System.getenv('CONSUMER_SECRET')
    String accessToken = project.hasProperty('accessToken') ? project.property('accessToken') : System.getenv('ACCESS_TOKEN')
    String accessTokenSecret = project.hasProperty('accessTokenSecret') ? project.property('accessTokenSecret') : System.getenv('ACCESS_TOKEN_SECRET')
    String releaseVersion = project.hasProperty('release.releaseVersion') ? project.property('release.releaseVersion') : System.getenv('RELEASE_VERSION')

    @TaskAction
    def updateStatus() {
        if (consumerKey != null && consumerSecret != null && accessToken != null && accessTokenSecret != null && releaseVersion != null) {
            String tweet = "Test Data Supplier ${releaseVersion} has been released: ${project.projectUrl} #testng #testdatasupplier #java"

            ConfigurationBuilder builder = new ConfigurationBuilder()
            builder.setDebugEnabled(true)
                    .setOAuthConsumerKey(consumerKey)
                    .setOAuthConsumerSecret(consumerSecret)
                    .setOAuthAccessToken(accessToken)
                    .setOAuthAccessTokenSecret(accessTokenSecret)

            new TwitterFactory(builder.build())
                    .getInstance()
                    .updateStatus(tweet)

            println "Release tweet has been published."
        } else {
            println "You should provide Twitter keys / secrets to perform status update."
        }
    }
}

import twitter4j.TwitterFactory
import twitter4j.conf.ConfigurationBuilder
import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask

buildscript {
    repositories {
        jcenter()
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'ru.vyarus:gradle-quality-plugin:3.0.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'
        classpath 'net.researchgate:gradle-release:2.6.0'
        classpath 'org.twitter4j:twitter4j-core:4.0.6'
        classpath 'gradle.plugin.se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.55'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
    }
}

group = 'io.github.sskorol'
version = version
description = 'Test Data Supplier is an extended version of common TestNG DataProvider.'

ext {
    gradleScriptDir = "${rootProject.projectDir}/gradle"
    projectUrl = "https://github.com/sskorol/test-data-supplier"
}

apply plugin: 'java'
apply plugin: 'ru.vyarus.quality'
apply plugin: 'se.bjurr.gitchangelog.git-changelog-gradle-plugin'
apply plugin: 'com.github.ben-manes.versions'
apply from: "${gradleScriptDir}/bintray.gradle"
apply from: "${gradleScriptDir}/release.gradle"
apply from: "${gradleScriptDir}/maven-publish.gradle"

sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    jcenter()
    mavenLocal()
}

configurations {
    jacoco
    jacocoRuntime
    agent
}

dependencies {
    agent 'org.aspectj:aspectjweaver:1.8.13'
    compile('org.testng:testng:6.14.3',
            'org.jooq:joor-java-8:0.9.7',
            'one.util:streamex:0.6.6',
            'org.projectlombok:lombok:1.16.20',
            'io.vavr:vavr:0.9.2',
            'org.aspectj:aspectjrt:1.8.13',
            'org.slf4j:slf4j-simple:1.8.0-beta2',
            'org.reflections:reflections:0.9.11'
    )
    testCompile 'org.assertj:assertj-core:3.9.1'
    jacoco group: 'org.jacoco', name: 'org.jacoco.ant', version: '0.8.1', classifier: 'nodeps'
    jacocoRuntime group: 'org.jacoco', name: 'org.jacoco.agent', version: '0.8.1', classifier: 'runtime'
}

sourceSets.main.output.classesDir = new File(buildDir, "classes/main")

task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourceJar
    archives javadocJar
}

test {
    doFirst {
        jvmArgs "-javaagent:${configurations.agent.singleFile}"
    }

    useTestNG() {
        suites 'src/test/resources/smoke-suite.xml'
    }
}

task gitChangelog(type: GitChangelogTask) {
    file = new File("CHANGELOG.md")
    templateContent = file('gradle/changelog.mustache').getText('UTF-8')
}

task instrument(dependsOn: ['classes']) {
    ext.outputDir = buildDir.path + '/classes-instrumented'
    doLast {
        ant.taskdef(name: 'instrument',
                classname: 'org.jacoco.ant.InstrumentTask',
                classpath: configurations.jacoco.asPath)
        ant.instrument(destdir: outputDir) {
            fileset(dir: sourceSets.main.output.classesDir)
        }
    }
}

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(instrument)) {
        tasks.withType(Test) {
            doFirst {
                systemProperty 'jacoco-agent.destfile', buildDir.path + '/jacoco/tests.exec'
                classpath = files(instrument.outputDir) + classpath + configurations.jacocoRuntime
            }
        }
    }
}

task report(dependsOn: ['instrument', 'test']) {
    doLast {
        ant.taskdef(name: 'report',
                classname: 'org.jacoco.ant.ReportTask',
                classpath: configurations.jacoco.asPath)
        ant.report() {
            executiondata {
                ant.file(file: buildDir.path + '/jacoco/tests.exec')
            }
            structure(name: 'Coverage Report') {
                classfiles {
                    fileset(dir: sourceSets.main.output.classesDir)
                }
                sourcefiles {
                    fileset(dir: 'src/main/java')
                }
            }
            html(destdir: buildDir.path + '/reports/jacoco')
            xml(destfile: buildDir.path + '/reports/jacoco/report.xml')
        }
    }
}

task tweet(type: Tweet)
afterReleaseBuild.dependsOn tweet, gitChangelog

class Tweet extends DefaultTask {

    String consumerKey = project.hasProperty('consumerKey') ? project.property('consumerKey') : System.getenv('CONSUMER_KEY')
    String consumerSecret = project.hasProperty('consumerSecret') ? project.property('consumerSecret') : System.getenv('CONSUMER_SECRET')
    String accessToken = project.hasProperty('accessToken') ? project.property('accessToken') : System.getenv('ACCESS_TOKEN')
    String accessTokenSecret = project.hasProperty('accessTokenSecret') ? project.property('accessTokenSecret') : System.getenv('ACCESS_TOKEN_SECRET')
    String releaseVersion = project.hasProperty('release.releaseVersion') ? project.property('release.releaseVersion') : System.getenv('RELEASE_VERSION')

    @TaskAction
    def updateStatus() {
        if (consumerKey != null && consumerSecret != null && accessToken != null && accessTokenSecret != null && releaseVersion != null) {
            String tweet = "Test Data Supplier ${releaseVersion} has been released: ${project.projectUrl} #testng #testdatasupplier #java"

            ConfigurationBuilder builder = new ConfigurationBuilder()
            builder.setDebugEnabled(true)
                    .setOAuthConsumerKey(consumerKey)
                    .setOAuthConsumerSecret(consumerSecret)
                    .setOAuthAccessToken(accessToken)
                    .setOAuthAccessTokenSecret(accessTokenSecret)

            new TwitterFactory(builder.build())
                    .getInstance()
                    .updateStatus(tweet)

            println "Release tweet has been published."
        } else {
            println "You should provide Twitter keys / secrets to perform status update."
        }
    }
}
